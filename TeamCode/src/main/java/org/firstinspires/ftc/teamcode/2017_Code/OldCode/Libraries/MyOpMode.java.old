package org.firstinspires.ftc.teamcode.OldCode.Libraries;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;

import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;

import static com.qualcomm.robotcore.hardware.DcMotor.RunMode.RUN_USING_ENCODER;
import static com.qualcomm.robotcore.hardware.DcMotor.RunMode.STOP_AND_RESET_ENCODER;


/**
 * Created by Ari on 20-06-17.
 *
 * This library file provides the backbone of (hopefully) all programs.
 * USES ITERATIVE OPMODE, NOT LINEAR.
 * (Perhaps we should make a linear library file.
 */
public abstract class MyOpMode extends OpMode {
    // Variables
    public static int motorSelection = 1;
    public static boolean motorSelectionSelected = false;
    public static DcMotor[] selectedMotors;
    public static boolean inverseDual = false;
    public static double turn;
    public static Orientation angles; // This needs to be public so we can access it in other classes.
    public static Acceleration gravity; // Same as above

    // Two-wheeled drive.
    public static DcMotor rightMotor;
    public static DcMotor leftMotor;

    // Holonomic Motors
    public static DcMotor frontLeft;
    public static DcMotor frontRight;
    public static DcMotor backLeft;
    public static DcMotor backRight;

    // IMU / Gyro
    public static BNO055IMU imu;


    // Check which hardwareMap is wanted.
    // Three settings: Singular, Dual and Holonomic
    public void selectHardwareMap() {
        while (!motorSelectionSelected) {
            telemetry.addData("STATUS: ", "Use the D-Pad to select configuration.");
            if (gamepad1.dpad_left) {
                motorSelection = 1; // "Singular"
                telemetry.addData("Map: ", "Singular Motor (rightMotor)");
            } else if (gamepad1.dpad_up) {
                motorSelection = 2; // "Dual"
                telemetry.addData("Map: ", "Dual Motors");
            } else if (gamepad1.dpad_right) {
                motorSelection = 3; // Dual Inverse
                telemetry.addData("Map: ", "Dual Inverse");
            } else if (gamepad1.dpad_down) {
                motorSelection = 4; // Holonomic
                telemetry.addData("Map: ", "Holonomic");
            }
            telemetry.update();
            if (gamepad1.a) {
                switch (motorSelection) {
                    case 1:
                        selectedMotors[1] = rightMotor;
                        break;
                    case 2:
                        inverseDual = false;
                        selectedMotors[1] = rightMotor;
                        selectedMotors[2] = leftMotor;
                        break;
                    case 3:
                        inverseDual = true;
                        selectedMotors[1] = rightMotor;
                        selectedMotors[2] = leftMotor;
                        break;
                    case 4:
                        selectedMotors[1] = frontLeft;
                        selectedMotors[2] = frontRight;
                        selectedMotors[3] = backLeft;
                        selectedMotors[4] = backRight;
                        break;
                    default:
                        telemetry.addData("ERROR: ", "INVALID MOTOR SELECTION");
                        telemetry.update();
                        break;
                }
                hardwareMapMotors(selectedMotors);
                motorSelectionSelected = true; // End the while statement

            }
        }
    }

    // Two voids to save lines
    public void hardwareMapMotors(DcMotor[] motors) {
        for (int i = 0; i < motors.length; i++) {
            motors[i] = hardwareMap.dcMotor.get("rightMotor");
            motors[i].setMode(STOP_AND_RESET_ENCODER);
            motors[i].setMode(RUN_USING_ENCODER);

            motors[i].setDirection(DcMotorSimple.Direction.FORWARD);
            if (inverseDual) {
                leftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
            }
        }

    }

    public void setMode(DcMotor[] motors, DcMotor.RunMode mode) {
        for (int i = 0; (i <= motors.length); i++) {
            motors[i].setMode(mode);
        }
    }

    // Robot Functionality
    public void moveSingle(double Power) {
            rightMotor.setPower(Power);
    }

    public void moveDual(double leftPower, double rightPower) {
            rightMotor.setPower(rightPower);
            leftMotor.setPower(leftPower);

            telemetry.addData("Left Power: ", leftPower);
            telemetry.addData("Right Power: ", rightPower);
            telemetry.update();

    }


    public void initGyro() {
        BNO055IMU.Parameters gyroParam = new BNO055IMU.Parameters();
        gyroParam.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        gyroParam.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        gyroParam.calibrationDataFile = "AdafruitIMUCalibration.json";
        gyroParam.loggingEnabled = true;
        gyroParam.loggingTag = "Gyro";
        gyroParam.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(gyroParam);

        telemetry.addData("GYRO: ", "Initialized");
        telemetry.update();
    }

    // updateGyro must be called every update loop.
    public void updateGyro(){
        angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
    }

    public void resetGyro() {
        turn = angles.firstAngle; // Rather than calling for a new value, refer to the updatedGyro value so there isn't any error
    }

    public double getGyroYaw(){

    }

    public void composeGyroTelemetry(){
        telemetry.addLine()
                .addData("gStatus: ", imu.getSystemStatus().toShortString())
                .addData("gCalib: ", imu.getCalibrationStatus().toString())
                .addData("gYaw: ", angles.firstAngle)
                .addData("gRoll: ", angles.secondAngle)
                .addData("gPitch: ", angles.thirdAngle);


    }
}


